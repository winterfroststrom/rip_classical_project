(define (operator mov-b)
  :parameters (?m ?l)
  :precondition (:and (:neq ?m ?l) (at B ?m))
  :effect
  (:and (at b ?l) 
	(:not (at B ?m)) 
	(:when (in P) (at P ?l))
	(:when (in P) (:not (at P ?m)))
	(:when (in D) (at D ?l))
	(:when (in D) (:not (at D ?m)))))

(define (operator take-out)
  :parameters (?x)
  :precondition (:neq ?x B)
  :effect
  (:not (in ?x)))
      
(define (operator put-in)
  :parameters (?x ?l)
  :precondition (:neq ?x B)
  :effect
  (:when (:and (at ?x ?l) (at B ?l)) (in ?x)))

;;;UCPOP(33): (bf-control 'get-paid)
;;;
;;;Initial  : ((PLACE HOME) (PLACE OFFICE) (OBJECT P) (OBJECT D) (OBJECT B)
;;;            (AT B HOME) (AT P HOME) (AT D HOME) (IN P))
;;;
;;;Step 1  : (PUT-IN D HOME)        Created 3 
;;;           0  -> (AT D HOME)         
;;;           0  -> (AT B HOME)         
;;;Step 2  : (TAKE-OUT P)           Created 2 
;;;Step 3  : (MOV-B HOME OFFICE)    Created 1 
;;;           3  -> (IN D)              
;;;           0  -> (AT B HOME)         
;;;           2  -> (NOT (IN P))        
;;;
;;;Goal    : (AND (AT B OFFICE) (AT D OFFICE) (AT P HOME))
;;;           1  -> (AT B OFFICE)       
;;;           1  -> (AT D OFFICE)       
;;;           0  -> (AT P HOME)         
;;;Complete!
;;;
;;;UCPOP (Init = 9  ; Goals = 4 ) => Win  (3 steps)     CPU 134      
;;;     Nodes (V = 20  ; Q = 10  ; C = 31  )             Branch 1.5       
;;;     Working Unifies: 278                             Bindings added: 37   
;;;NIL

(define (problem get-paid)
  :init (:and (place home) (place office) 
	      (object p) (object d)(object b)
	      (at B home) (at P home) (at D home) (in P))
  :goals (:and (at B office) (at D office) (at P home)))


(define (problem get-paid2)
  :init (:and (place home) (place office) 
	      (object p) (object d) (object b)
	      (at B home) (at P home) (at D home) (in P))
  :goals (:and (at P home) (at D office) (at B home)))


(define (problem get-paid3)
  :init (:and (place home) (place office) (place bank)
	      (object p) (object d) (object b)
	      (at B home) (at P home) (at D home) (in P))
  :goals (:and (at P bank) (at D office) (at B home)))


(define (problem get-paid4)
  :init (:and (place home) (place office) (place bank)
	      (object p) (object d) (object b)
	      (at B home) (at P home) (at D home) (in P))
  :goals (:and (at B home) (at D office) (at P bank)))

