  (define (operator mov-b)
    :parameters (?m ?l)
    :precondition (:and (at B ?m) (:neq ?m ?l))
    :effect
    (:and (at b ?l) (:not (at B ?m))
     (:forall (?z)
      (:when (:and (in ?z) (:neq ?z B))
     	(:and (at ?z ?l)  (:not (at ?z ?m)))))))

  (define (operator take-out)
      :parameters (?x)
      :precondition (:neq ?x B)
      :effect
      (:not (in ?x)))
      
  (define (operator put-in)
      :parameters (?x ?l)
      :precondition (:neq ?x B)
      :effect
      (:when (:and (at ?x ?l) (at B ?l)) (in ?x)))

;;;UCPOP(42): (bf-control 'uget-paid)
;;;
;;;Initial  : ((AT B HOME) (AT P HOME) (AT D HOME) (IN P))
;;;
;;;Step 1  : (PUT-IN D HOME)        Created 3 
;;;           0  -> (AT D HOME)         
;;;           0  -> (AT B HOME)         
;;;Step 2  : (TAKE-OUT P)           Created 2 
;;;Step 3  : (MOV-B HOME OFFICE)    Created 1 
;;;           3  -> (IN D)              
;;;           0  -> (AT B HOME)         
;;;           2  -> (NOT (IN P))        
;;;
;;;Goal    : (AND (AT B OFFICE) (AT D OFFICE) (AT P HOME))
;;;           1  -> (AT B OFFICE)       
;;;           1  -> (AT D OFFICE)       
;;;           0  -> (AT P HOME)         
;;;Complete!
;;;
;;;UCPOP (Init = 5  ; Goals = 4 ) => Win  (3 steps)     CPU 150      
;;;     Nodes (V = 23  ; Q = 11  ; C = 44  )             Branch 1.4782609 
;;;     Working Unifies: 254                             Bindings added: 65   
;;;NIL

(define (problem uget-paid)
       :init (:and (at B home) (at P home) (at D home) (in P))
       :goals (:and (at B office) (at D office) (at P home)))
      
(define (problem uget-paid2)
       :init (:and (place home)(place office) (object p)(object d)(object b)
		(at B home) (at P home) (at D home) (in P))
       :goals (:and (at P home) (at D office) (at B home)))


(define (problem uget-paid3)
       :init (:and (place home)(place office)(place bank)
		(object p)(object d)(object b)
		(at B home) (at P home) (at D home) (in P))
       :goals (:and (at P bank) (at D office) (at B home)))


(define (problem uget-paid4)
       :init (:and (place home)(place office)(place bank)
		(object p)(object d)(object b)
		(at B home) (at P home) (at D home) (in P))
       :goals (:and (at B home) (at D office) (at P bank)))
